// ***************************************************************************
//
// Reality - The Matrix Online Server Emulator
// Copyright (C) 2012 - Michael Lingg
// http://mxoemu.info
//
// ---------------------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// ---------------------------------------------------------------------------
//
// The World Model handles all objects within the world.  This is currently
// done via a vector or map for each object.  The current setup is only good
// for small numbers of clients, eventually this will have to be replaced with
// a model view for each client.
// Things like paths will eventually be moved into the objects they are owned
// by such as zones once they are created.
//
// Characters have their game object ID (the ID sent to the client that the
// client will always use to identify the object) generated by this class.
// NPCs are limited to the range of 100-32767 and PCs are limited to the range
// of 32768-65535.  The code is setup to recover freed IDs but no code is yet
// written to free IDs.
//
// ***************************************************************************

#ifndef MXOSIM_WORLDMODEL_H
#define MXOSIM_WORLDMODEL_H

#include "Common.h"
#include "PlayerCharacterModel.h"
#include "NPCModel.h"
#include "Path.h"

class WorldModel
{

	public :

		WorldModel ( void ) ;
		~WorldModel ( void ) ;

			// User ID and Character ID allow the PC to be loaded from the
			// database.
			// Is User ID needed for the additional security at this point or
			// just the Character ID which is a unique ID in the DB.
		PlayerCharacterModel* AddPlayerCharacter ( unsigned NewUserId ,
		                                           unsigned NewCharacterId ) ;
																 
			// No custom generation for NPCs right now, just a default NPC
			// spawned at the specified location.
		NPCModel* AddNPC ( LocationVector* NPCLocation ) ;

			// Needed for anything?
			// Useful if we already have a character but its not in the list yet.
		int AddCharacter ( CharacterModel* NewCharacter ) ;

			// Returns the PC model associated with the user's ID.
		PlayerCharacterModel* FindPlayer ( unsigned UserId ) ;
		
			// Returns the CharacterModel (any type) associated with the GOId.
		CharacterModel* GetCharacter ( unsigned GOId ) ;

			//
			// Returns the first character stored, most likely to be an NPC.
			//
		CharacterModel* GetFirstCharacter ( void ) ;

			//
			// Returns the next character in the list after the provide GOId.
			// Returns NULL if no characters exist after that GOId.
			//
		CharacterModel* GetNextCharacter ( unsigned PreviousGOId ) ;

			//
			// Function to be called periodically to process Model updates.
			// Primarily used for things like updating the database with PC
			// position changes or other DB changes.
			//
		void ProcessUpdates ( void ) ;
		
// Future Node Stuff
		unsigned AddSpawnPoint ( LocationVector NewSpawnPoint ) ;
		unsigned GetSpawnCount ( void ) ;
		LocationVector* GetSpawnPoint ( unsigned SpawnID ) ;
		
		unsigned AddPatrolPath ( void ) ;
		unsigned GetPathCount ( void ) ;
		Path* GetPath ( unsigned PatrolId ) ;
		
		unsigned GetNewSessionId ( void ) ;
		bool FreeSessionID ( unsigned RemoveID ) ;

	private :

		typedef enum CharacterType_T
		{
			PC ,
			NPC ,
		} ;

			//
			// returns the lowest unused GO ID for PC or NPC.
			//
		unsigned getNextGOId ( CharacterType_T CharacterType ) ;

			// the list of character models indexed by their GO ID.
		map < unsigned, CharacterModel* > CharacterList ;
		
			// The last ID where all IDs prior to and including it are used.
			// Indicates the next ID to allocate to a new object.  Is set to
			// first object - 1 if no object has been allocated yet.
		unsigned LastContinuousNPCId ;
		unsigned LastContinuousPCId ;

			// Lowest and highest allowed NPC and PC GOIds per client software.
		static const unsigned MinNPCId = 100 ;
		static const unsigned MaxNPCId = 32767 ;
		static const unsigned MinPCId = 32768 ;
		static const unsigned MaxPCId = 65535 ;

			// Spawn point and Path list.  Needs further work
		vector< LocationVector* > SpawnPoints ;
		vector< Path* > Paths ;

		unsigned LastContinuousSessionId ;
		std::set< unsigned > UsedSessionIds ;

} ;

#endif MXOSIM_WORLDMODEL_H